RCY0[,a]=RCY[cbind(v0[,a],aux[a])]
YI0[,a]=YI[cbind(v0[,a],aux[a])]
v0ind[(nrow(v0)*(a-1)+1):(nrow(v0)*a),]=cbind(v0[,a],aux[a])# id der expansion ergebnisse bestimmter länge
}
g0=g[g[,4]==0,]
g00<-matrix(g0[,c(1,3)],nrow(g0),2)
g00[,2]=g00[,2]-sp+1# anpassen, da in der 1. spalte die werte der kürzesten anlageperiod sp stehen.
# CONTRACTION
g1=g[g[,4]==1,]
g11=matrix(g1[,c(1,3)],nrow(g1),2)
g11[,2]=g11[,2]-sp+1
if(g[1,4]==0){
g00[1,1]<-2 # die erste beobachtung beginnt immer erst bei 2
g00[1,2]<-g00[1,2]-1 # da die erste beobachtung immer erst bei 2 beginnt, ist die anlage auch 1 monat kürzer
}else{
g11[1,1]<-2 # die erste beobachtung beginnt immer erst bei 2
g11[1,2]<-g11[1,2]-1}
#INTERVALLE VOR UND NACH peak/trough
#peak
s<-12
#SONDERLOCKE: 14. turning point ist das datenende...daher hier 1:13
v0<-baa(g0[1:13,2],s)# indexmatrix der intervalle vor einer expansion
YILS0<-matrix(NA,nrow(v0),s*2) # ergebnismatrix: Y (v0phasen x intervallänge)
DCAI0<-matrix(NA,nrow(v0),s*2) # ergebnismatrix: Y (v0phasen x intervallänge)
DCALS0<-matrix(NA,nrow(v0),s*2) # ergebnismatrix: Y (v0phasen x intervallänge)
RCY0<-matrix(NA,nrow(v0),s*2)
YI0<-matrix(NA,nrow(v0),s*2) # ergebnismatrix: Y (v0phasen x intervallänge)
v0ind<-matrix(NA,nrow(v0)*s*2,2)#untereinander gestapelte indexwerte der v0
aux<-c(s:1,1:s)
for (a in 1:(s*2)){
YILS0[,a]=YILS[cbind(v0[,a],aux[a])]
DCAI0[,a]=DCAI[cbind(v0[,a],aux[a])]
DCALS0[,a]=DCALS[cbind(v0[,a],aux[a])]
RCY0[,a]=RCY[cbind(v0[,a],aux[a])]
YI0[,a]=YI[cbind(v0[,a],aux[a])]
v0ind[(nrow(v0)*(a-1)+1):(nrow(v0)*a),]=cbind(v0[,a],aux[a])# id der expansion ergebnisse bestimmter länge
}
a
YILS0[,a]
DCAI0[,a]
DCALS0[,a]
RCY0[,a]
RCY0
View(RCY0)
fix(aux)
for (a in 1:(s*2)){
YILS0[,a]=YILS[cbind(v0[,a],aux[a])]
#DCAI0[,a]=DCAI[cbind(v0[,a],aux[a])]
#DCALS0[,a]=DCALS[cbind(v0[,a],aux[a])]
RCY0[,a]=RCY[cbind(v0[,a],aux[a])]
YI0[,a]=YI[cbind(v0[,a],aux[a])]
v0ind[(nrow(v0)*(a-1)+1):(nrow(v0)*a),]=cbind(v0[,a],aux[a])# id der expansion ergebnisse bestimmter länge
}
for (a in 1:(s*2)){
YILS0[,a]=YILS[cbind(v0[,a],aux[a])]
#DCAI0[,a]=DCAI[cbind(v0[,a],aux[a])]
#DCALS0[,a]=DCALS[cbind(v0[,a],aux[a])]
#RCY0[,a]=RCY[cbind(v0[,a],aux[a])]
YI0[,a]=YI[cbind(v0[,a],aux[a])]
v0ind[(nrow(v0)*(a-1)+1):(nrow(v0)*a),]=cbind(v0[,a],aux[a])# id der expansion ergebnisse bestimmter länge
}
a
for (a in 1:(s*2)){
YILS0[,a]=YILS[cbind(v0[,aux[a]],aux[a])]
DCAI0[,a]=DCAI[cbind(v0[,aux[a]],aux[a])]
DCALS0[,a]=DCALS[cbind(v0[,aux[a]],aux[a])]
RCY0[,a]=RCY[cbind(v0[,aux[a]],aux[a])]
YI0[,a]=YI[cbind(v0[,aux[a]],aux[a])]
v0ind[(nrow(v0)*(a-1)+1):(nrow(v0)*a),]=cbind(v0[,aux[a]],aux[a])# id der expansion ergebnisse bestimmter länge
}
RCY0
save.image("F:/Cost Averaging/1908.RData")
v0[,aux[a]]
apply(RCY,2,mean)/apply(RCY,2,sd)
apply(RCY,1,mean)/apply(RCY,1,sd)
g0=g[g[,4]==0,]
g00<-matrix(g0[,c(1,3)],nrow(g0),2)
g00[,2]=g00[,2]-sp+1# anpassen, da in der 1. spalte die werte der kürzesten anlageperiod sp stehen.
# CONTRACTION
g1=g[g[,4]==1,]
g11=matrix(g1[,c(1,3)],nrow(g1),2)
g11[,2]=g11[,2]-sp+1
if(g[1,4]==0){
g00[1,1]<-2 # die erste beobachtung beginnt immer erst bei 2
g00[1,2]<-g00[1,2]-1 # da die erste beobachtung immer erst bei 2 beginnt, ist die anlage auch 1 monat kürzer
}else{
g11[1,1]<-2 # die erste beobachtung beginnt immer erst bei 2
g11[1,2]<-g11[1,2]-1}
#INTERVALLE VOR UND NACH peak/trough
#peak
s<-12
#SONDERLOCKE: 14. turning point ist das datenende...daher hier 1:13
v0<-baa(g0[1:13,2],s)# indexmatrix der intervalle vor einer expansion
YILS0<-matrix(NA,nrow(v0),s*2) # ergebnismatrix: Y (v0phasen x intervallänge)
DCAI0<-matrix(NA,nrow(v0),s*2) # ergebnismatrix: Y (v0phasen x intervallänge)
DCALS0<-matrix(NA,nrow(v0),s*2) # ergebnismatrix: Y (v0phasen x intervallänge)
RCY0<-matrix(NA,nrow(v0),s*2)
YI0<-matrix(NA,nrow(v0),s*2) # ergebnismatrix: Y (v0phasen x intervallänge)
v0ind<-matrix(NA,nrow(v0)*s*2,2)#untereinander gestapelte indexwerte der v0
aux<-c(s:1,1:s)
for (a in 1:(s*2)){
YILS0[,a]=YILS[cbind(v0[,aux[a]],aux[a])]
DCAI0[,a]=DCAI[cbind(v0[,aux[a]],aux[a])]
DCALS0[,a]=DCALS[cbind(v0[,aux[a]],aux[a])]
RCY0[,a]=RCY[cbind(v0[,aux[a]],aux[a])]
YI0[,a]=YI[cbind(v0[,aux[a]],aux[a])]
v0ind[(nrow(v0)*(a-1)+1):(nrow(v0)*a),]=cbind(v0[,aux[a]],aux[a])# id der expansion ergebnisse bestimmter länge
}
View(RCY0)
apply(RCY0,2,mean)
apply(RCY0,2,mean)/apply(RCY0,2,sd)
RCY1<-matrix(NA,nrow(v1),s*2)
s<-12
#SONDERLOCKE: 14. turning point ist das datenende...daher hier 1:13
v1<-baa(g1[1:13,2],s)# indexmatrix der intervalle vor einer expansion
YILS1<-matrix(NA,nrow(v1),s*2) # ergebnismatrix: Y (v0phasen x intervallänge)
DCAI1<-matrix(NA,nrow(v1),s*2) # ergebnismatrix: Y (v0phasen x intervallänge)
DCALS1<-matrix(NA,nrow(v1),s*2) # ergebnismatrix: Y (v1phasen x intervallänge)
RCY1<-matrix(NA,nrow(v1),s*2)
YI1<-matrix(NA,nrow(v1),s*2) # ergebnismatrix: Y (v1phasen x intervallänge)
v1ind<-matrix(NA,nrow(v1)*s*2,2)#untereinander gestapelte indexwerte der v1
aux<-c(s:1,1:s)
for (a in 1:(s*2)){
YILS1[,a]=YILS[cbind(v1[,aux[a]],aux[a])]
DCAI1[,a]=DCAI[cbind(v1[,aux[a]],aux[a])]
DCALS1[,a]=DCALS[cbind(v1[,aux[a]],aux[a])]
RCY1[,a]=RCY[cbind(v1[,aux[a]],aux[a])]
YI1[,a]=YI[cbind(v1[,aux[a]],aux[a])]
v1ind[(nrow(v1)*(a-1)+1):(nrow(v1)*a),]=cbind(v1[,aux[a]],aux[a])# id der expansion ergebnisse bestimmter länge
}
apply(RCY1,2,mean)/apply(RCY1,2,sd)
tt<-apply(RCY1,2,mean)/apply(RCY1,2,sd)
fix(tt)
apply(RCY0,2,mean)/apply(RCY0,2,sd)
View(INT)
plot(int)
tbill<-ts(int,start=c(1934,1),freq=12)
plot(tbill)
load("I:/Praktikanten/Nauhaus/05 Spline Methode/R/splinerohdaten.csv")
dataQ = read.table("splinerohdaten.csv", header = TRUE, sep = ",", dec = ".")
setwd("I:/Praktikanten/Nauhaus/Spline Methode")
dataQ = read.table("splinerohdaten.csv", header = TRUE, sep = ",", dec = ".")
setwd("I:/Praktikanten/Nauhaus/Spline Methode/R")
library("fpp", lib.loc="C:/Users/dulbricht/Documents/R/R-3.0.0/library")
load("F:/Hertie School of Governance/Vorlesung/cons.xlsx")
cons <- read.table("F:/Hertie School of Governance/Vorlesung/cons.csv", header=T, quote="\"")
View(cons)
?adf
adf.test(cons)
c=matrix(x,218,1)
c=matrix(cons,218,1)
adf.test(c)
?adf.test
co=c(cons)
cons=ts(cons,s=c(1959,1),f=4)
plot(cons)
adf.test(cons)
adf.test(d(cons)
)
adf.test(dif(cons)
)
adf.test(diff(cons))
?diff
cons <- read.csv("F:/Hertie School of Governance/Vorlesung/cons.csv")
View(cons)
cons<-ts(cons,s=c(1959,1),f=4)
plot(cons)
adf.test(cons)
str(cons)
fix(cons)
adf.test(cons$con)
adf.test(cons$cons)
adf.test(cons[,1])
test=cons
test=cbind(test,ln(test))
test=cbind(test,log(test))
cons=cbind(cons,log(cons))
plot(cons[,c(3,4)])
plot(cons[,1])
plot(cons[name=cons])
plot(cons[,name=cons])
plot(cons)
View(cons)
names(cons)
?mts
?ts
str(cons)
cons<-ts(cons,s=c(1959,1),f=4)
plot(cons)
fix(cons)
cons<-ts(cons,s=c(1959,1),f=4)
str(cons)
cons<-ts(cons,s=c(1959,1),f=4,names=c('cons','inc','ln(cons)','ln(inc)'))
plot(cons)
adf.test(cons[,3])
adf.test(cons[,3])
adf.test(cons[,4])
cons=cbind(cons, diff(cons))
cons<-ts(cons,s=c(1959,1),f=4,names=c('cons','inc','ln(cons)','ln(inc)','dif(cons)','dif(inc)','dif(ln(cons))','dif(ln(inc))'))
plot(cons)
save.image("F:/Hertie School of Governance/Vorlesung/cons.RData")
data <- read.csv("F:/Hertie School of Governance/Vorlesung/cons.csv")
data <- read.csv("F:/Hertie School of Governance/Vorlesung/cons.csv")
fit.ex3 <- lm(cons ~ inc, data=cons)
summary(fit.ex3)
res3 <- ts(resid(fit.ex3),s=1959.1,f=4)
plot(res3)
Acf(res3)
?Acf
Pacf(res3)
save.image("F:/Hertie School of Governance/Vorlesung/cons.RData")
plot(cons)
plot(cons,data=cons)
save.image("F:/Hertie School of Governance/Vorlesung/cons.RData")
letters(1:6)
letters[1:3]
LETTERS[1:3]
month.ab[1:6]
month.abb[1:6]
month.name[1:6]
cummin (c(3:1 , 2:0 , 4:2) )
(c(3:1 , 2:0 , 4:2) )
myframe[,1]
source('H:/git/bubblesbreakdowns/Getting and preparing data.R', echo=TRUE)
source('H:/git/bubblesbreakdowns/Getting and preparing data.R', echo=TRUE)
dir.var
library("xlsx")
no_mth_variables=character(0)
for (j in 1:nvar){
#         if (variables[j]=="EMPLOY"){next}
dir.var=paste(dir.rt,'/',variables[j],sep='')
files=list.files(dir.var)
mfiles=files[grep('MvMd',files)]
if (length(mfiles)==0){
no_mth_variables=c(no_mth_variables,variables[j])
warning(paste('no monthly data available for ',variables[j],sep=''))
next
}
cleanmfiles=gsub('[0-9]','',mfiles)
varname=unique(cleanmfiles)
if (length(mfiles)==1){
#                 only one file
df=read.xlsx2(paste(dir.var,'/',varname,sep=''),sheetIndex=1,row.names=1)
eval(parse(text=paste(variables[j],'=df',sep='')))
}else{
#                         more than one file
if(length(varname)>1){warning('not only one variable')}
varname=gsub('\\.xls','',varname)
numfiles=gsub(varname,'',mfiles)
numfiles=gsub('\\.xls','',numfiles)
numfiles=max(as.numeric(numfiles))
for (i in 1:numfiles){
df_add=read.xlsx2(paste(dir.var,'/',varname,i,'.xls',sep=''),sheetIndex=1,row.names=1)
if (i==1){
df=df_add
}else{
if (nrow(df)!=nrow(df_add)){
df_dates=row.names(df)
df_add_dates=row.names(df_add)
matchdates=match(df_add_dates,df_dates)
add_dates=df_add_dates[which(is.na(matchdates)==T)]
add_lines=df[1:length(add_dates),]
add_lines[1:length(add_dates),]=NA
row.names(add_lines)=add_dates
df=rbind(df,add_lines)
}
df=cbind(df,df_add)
}
if (i==numfiles){
eval(parse(text=paste(variables[j],'=df',sep='')))
}
}
}
}
rm(no_mth_variables,variables,add_lines,df,df_add,cleanmfiles,i,j,mfiles,numfiles,add_dates,df_add_dates,df_dates,dir.rt,dir.rt,dir.var,fileaddress,files,matchdates,nvar,varname,startaddress)
# Needed repairs: EMPLO
list=ls()
grep('[A-Z]',list)
list=list[grep('[A-Z]',list)]
list
list=unique(list)
list.compounded.variables=ls()
list.compounded.variables=list.compounded.variables[grep('[A-Z]',list.compounded.variables)]
list.compounded.variables=list.compounded.variables[-c(grep('wd',list.compounded.variables),grep('list.compounded.variables',list.compounded.variables))]
for (variable in list.compounded.variables){
cat(paste('write.csv(',variable,',\'',wd,'/',variable,'.csv\')',sep=''),file='out')
#         test=paste(wd,'/',variable,'.csv',sep='')
eval(parse(file='out'))
}
save.image(paste(wd,"/realtime.RData",sep=''))
variables[which(is.na(not_downl)==T)]
zip_index=regexec(paste('/','(.*)','.zip',sep=''),varhtml)
zip_index=regexec(paste('([A-Za-z0-9\\_]{1,}\\.zip[x]?)',sep=''),varhtml)
zip_vector=regmatches(varhtml,zip_index)#[[1]][2]
zip_vector
nonzeros
nonzeros=sapply(zip_vector, function(x)length(x)!=0)
zip=zip_vector[nonzeros]
zip
zip=sapply(zip,function(x) x[[1]])
zip
zip=zip_vector[nonzeros]
zip
zip=unique(zip)
zip
zip=sapply(zip,function(x) x[[1]])
(length(zip)!=0)
variables_downloaded
source('H:/git/bubblesbreakdowns/Getting and preparing data.R', echo=TRUE)
no_mth_variables=character(0)
for (j in 1:nvar){
#         if (variables[j]=="EMPLOY"){next}
dir.var=paste(dir.rt,'/',variables[j],sep='')
files=list.files(dir.var)
mfiles=files[grep('MvMd',files)]
if (length(mfiles)==0){
no_mth_variables=c(no_mth_variables,variables[j])
warning(paste('no monthly data available for ',variables[j],sep=''))
next
}
cleanmfiles=gsub('[0-9]','',mfiles)
varname=unique(cleanmfiles)
if (length(mfiles)==1){
#                 only one file
df=read.xlsx2(paste(dir.var,'/',varname,sep=''),sheetIndex=1,row.names=1)
eval(parse(text=paste(variables[j],'=df',sep='')))
}else{
#                         more than one file
if(length(varname)>1){warning('not only one variable')}
varname=gsub('\\.xls','',varname)
numfiles=gsub(varname,'',mfiles)
numfiles=gsub('\\.xls','',numfiles)
numfiles=max(as.numeric(numfiles))
for (i in 1:numfiles){
df_add=read.xlsx2(paste(dir.var,'/',varname,i,'.xls',sep=''),sheetIndex=1,row.names=1)
if (i==1){
df=df_add
}else{
if (nrow(df)!=nrow(df_add)){
df_dates=row.names(df)
df_add_dates=row.names(df_add)
matchdates=match(df_add_dates,df_dates)
add_dates=df_add_dates[which(is.na(matchdates)==T)]
add_lines=df[1:length(add_dates),]
add_lines[1:length(add_dates),]=NA
row.names(add_lines)=add_dates
df=rbind(df,add_lines)
}
df=cbind(df,df_add)
}
if (i==numfiles){
eval(parse(text=paste(variables[j],'=df',sep='')))
}
}
}
}
numfiles
varname
mfiles
cleanmfiles=gsub('[0-9]','',mfiles)
varname=unique(cleanmfiles)
varname
grep('zip',varname)
varname=varname[-grep('zip',varname)]
varname=gsub('\\.xls','',varname)
numfiles=gsub(varname,'',mfiles)
numfiles
mfiles=mfiles[-grep('zip',mfiles)]
numfiles=gsub(varname,'',mfiles)
numfiles=gsub('\\.xls','',numfiles)
numfiles=max(as.numeric(numfiles))
numfiles
varname
numfiles=gsub(varname,'',mfiles)
numfiles
source('~/.active-rstudio-document', echo=TRUE)
zip
dir.var
variables[j]
(length(zip)!=0)
dir.var
download.file(paste(fileaddress,zip,sep='')
, paste(dir.var,'/',zip,sep='')
,mode='wb')
unzip(paste(dir.var,'/',zip,sep=''))
?unzip
unzip(paste(dir.var,'/',zip,sep=''),exdir=dir.var)
source('~/.active-rstudio-document', echo=TRUE)
for (j in 1:nvar){
#         if (variables[j]=="EMPLOY"){next}
dir.var=paste(dir.rt,'/',variables[j],sep='')
files=list.files(dir.var)
mfiles=files[grep('MvMd',files)]
# taking care of zip files
if (length(grep('zip',mfiles))!=1){
mfiles=mfiles[-grep('zip',mfiles)]
}
if (length(mfiles)==0){
no_mth_variables=c(no_mth_variables,variables[j])
warning(paste('no monthly data available for ',variables[j],sep=''))
next
}
cleanmfiles=gsub('[0-9]','',mfiles)
varname=unique(cleanmfiles)
# taking care of zip files
if (length(grep('zip',varname))!=0){
varname=varname[-grep('zip',varname)]
}
if (length(mfiles)==1){
#                 only one file
df=read.xlsx2(paste(dir.var,'/',varname,sep=''),sheetIndex=1,row.names=1)
eval(parse(text=paste(variables[j],'=df',sep='')))
}else{
#                         more than one file
if(length(varname)>1){warning('not only one variable')}
varname=gsub('\\.xls','',varname)
numfiles=gsub(varname,'',mfiles)
numfiles=gsub('\\.xls','',numfiles)
numfiles=max(as.numeric(numfiles))
for (i in 1:numfiles){
df_add=read.xlsx2(paste(dir.var,'/',varname,i,'.xls',sep=''),sheetIndex=1,row.names=1)
if (i==1){
df=df_add
}else{
if (nrow(df)!=nrow(df_add)){
df_dates=row.names(df)
df_add_dates=row.names(df_add)
matchdates=match(df_add_dates,df_dates)
add_dates=df_add_dates[which(is.na(matchdates)==T)]
add_lines=df[1:length(add_dates),]
add_lines[1:length(add_dates),]=NA
row.names(add_lines)=add_dates
df=rbind(df,add_lines)
}
df=cbind(df,df_add)
}
if (i==numfiles){
eval(parse(text=paste(variables[j],'=df',sep='')))
}
}
}
}
varname
mfiles
(length(grep('zip',mfiles))!=1)
(length(grep('zip',mfiles))!=0)
for (j in 1:nvar){
#         if (variables[j]=="EMPLOY"){next}
dir.var=paste(dir.rt,'/',variables[j],sep='')
files=list.files(dir.var)
mfiles=files[grep('MvMd',files)]
# taking care of zip files
if (length(grep('zip',mfiles))!=0){
mfiles=mfiles[-grep('zip',mfiles)]
}
if (length(mfiles)==0){
no_mth_variables=c(no_mth_variables,variables[j])
warning(paste('no monthly data available for ',variables[j],sep=''))
next
}
cleanmfiles=gsub('[0-9]','',mfiles)
varname=unique(cleanmfiles)
# taking care of zip files
if (length(grep('zip',varname))!=0){
varname=varname[-grep('zip',varname)]
}
if (length(mfiles)==1){
#                 only one file
df=read.xlsx2(paste(dir.var,'/',varname,sep=''),sheetIndex=1,row.names=1)
eval(parse(text=paste(variables[j],'=df',sep='')))
}else{
#                         more than one file
if(length(varname)>1){warning('not only one variable')}
varname=gsub('\\.xls','',varname)
numfiles=gsub(varname,'',mfiles)
numfiles=gsub('\\.xls','',numfiles)
numfiles=max(as.numeric(numfiles))
for (i in 1:numfiles){
df_add=read.xlsx2(paste(dir.var,'/',varname,i,'.xls',sep=''),sheetIndex=1,row.names=1)
if (i==1){
df=df_add
}else{
if (nrow(df)!=nrow(df_add)){
df_dates=row.names(df)
df_add_dates=row.names(df_add)
matchdates=match(df_add_dates,df_dates)
add_dates=df_add_dates[which(is.na(matchdates)==T)]
add_lines=df[1:length(add_dates),]
add_lines[1:length(add_dates),]=NA
row.names(add_lines)=add_dates
df=rbind(df,add_lines)
}
df=cbind(df,df_add)
}
if (i==numfiles){
eval(parse(text=paste(variables[j],'=df',sep='')))
}
}
}
}
list.compounded.variables=ls()
list.compounded.variables=list.compounded.variables[grep('[A-Z]',list.compounded.variables)]
list.compounded.variables=ls()
list.compounded.variables=list.compounded.variables[grep('[A-Z]',list.compounded.variables)]
list.compounded.variables=list.compounded.variables[-c(grep('wd',list.compounded.variables),grep('list.compounded.variables',list.compounded.variables))]
for (variable in list.compounded.variables){
cat(paste('write.csv(',variable,',\'',wd,'/',variable,'.csv\')',sep=''),file='out')
#         test=paste(wd,'/',variable,'.csv',sep='')
eval(parse(file='out'))
}
save.image(paste(wd,"/realtime.RData",sep=''))
save.image(paste(wd,"/data/realtime.RData",sep=''))
